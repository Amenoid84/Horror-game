<!doctype html> <html lang="fa"> <head> <meta charset="UTF-8" /> <meta name="viewport" content="width=device-width, initial-scale=1.0" /> <title>مارکوس دونده - نسخه پیکسلی با پیام جدید</title> <style> body { background-color: #111; display: flex; justify-content: center; align-items: center; height: 100vh; font-family: monospace; color: #0f0; direction: rtl; } .nokia { display: grid; grid-template-columns: 100px 300px 100px; gap: 10px; background: #000; padding: 10px; border: 4px solid #0f0; border-radius: 8px; } .panel { width: 100px; height: 300px; background: #000; display: flex; justify-content: center; align-items: center; font-size: 12px; color:#0f0; } canvas { background: #000; display: block; border: 2px solid #0f0; image-rendering: pixelated; } #startBtn { margin-top: 10px; padding: 5px 10px; background:#000; color:#0f0; border:2px solid #0f0; cursor:pointer; } </style> </head> <body> <div class="nokia"> <div class="panel" id="leftPanel">READY</div> <canvas id="game" width="300" height="300"></canvas> <div class="panel" id="rightPanel">BEST:<br><span id="best">0</span></div> </div> <button id="startBtn">شروع بازی</button> <script> const canvas = document.getElementById('game'); const ctx = canvas.getContext('2d'); ctx.imageSmoothingEnabled = false; let score = 0; let best = localStorage.getItem('bestScore') || 0; document.getElementById('best').innerText = best; const groundY = 245; let gameRunning = false; const turtle = {x:50, y:0, vy:0, onGround:true, frame:0}; let gravity = 0.5; const speed = 3.2; let obstacles = []; let animTimer = 0; let mapSequence = []; let mapIndex = 0; const maps = { 1: "____#______##_____", 2: "_______#_____##__", 3: "_______#__________", 4: "_____#______#_____", 5: "_____##______##__" }; const marcusFrames = [ [ "□□□□□□□□■■□", "□□□□□□■■■■■", "□□□□■■■■■■■", "□□■■■■■□□□□", "□■■■■■■□□□□", "■■■■■■■■□□□", "■■■■■■■■□□□", "■■■■■■■□□□□", "□■■■■■■□□□□", "□■■■■■■□□□□", "■■■■■■■■□□□", "■■■■■■■■□□□", "□■■■■■■■■□□", "□■■■■■■■■■□", "□■■■■■■■■■□", "□□■■■■■■■■□", "□□□□■■■■■■□", "□□□□□□□■■□□", "□□□□□□□■■□□", "□□□□□□□■■□□", "□□□□□□□■■□□", "□□□□□□□■■□□", "□□□□□□□■■□□", "□□□□□□□■■□□" ], [ "□□□□□□□□■■□", "□□□□□□■■■■■", "□□□□■■■■■■■", "□□■■■■■□□□□", "□■■■■■■□□□□", "■■■■■■■■□□□", "■■■■■■■■□□□", "■■■■■■■□□□□", "□■■■■■■□□□□", "□■■■■■■□□□□", "■■■■■■■■□□□", "■■■■■■■■□□□", "□■■■■■■■■□□", "□■■■■■■■■■□", "□■■■■■■■■■□", "□□■■■■■■■■□", "□□□□■■■■■■□", "□□□□□□■□□■□", "□□□□□□■□□■□", "□□□□□□■□□■□", "□□□□□□■□□■□", "□□□□□□■□□■□", "□□□□□□■□□■□", "□□□□□□■□□■□" ] ]; function drawMarcus(frameIndex){ const frame = marcusFrames[frameIndex]; ctx.fillStyle="#0f0"; const size = 3; for(let y=0; y<frame.length; y++){ const row = frame[y]; for(let x=0;x<row.length;x++){ if(row[x]==="■"){ ctx.fillRect(turtle.x + x*size, turtle.y + y*size, size, size); } } } } function generateMap(){ mapSequence = []; for(let i=0;i<5;i++){ mapSequence.push(1+Math.floor(Math.random()*5)); } mapIndex = 0; } function spawnObstaclesFromMap(mapNum){ obstacles = []; const line = maps[mapNum]; for(let i=0;i<line.length;i++){ if(line[i]==="#"){ obstacles.push({x:300 + i*6, y:groundY - 20, w:6, h:20}); } } } function startGame(){ turtle.y = groundY - 72; turtle.vy = 0; turtle.onGround = true; score = 0; generateMap(); spawnObstaclesFromMap(mapSequence[mapIndex]); gameRunning = true; } document.getElementById('startBtn').addEventListener('click', ()=>startGame()); function jump(){ if(turtle.onGround && gameRunning){ turtle.vy=-10; turtle.onGround=false;} } document.addEventListener('keydown', e=>{ if(e.code==='Space' && gameRunning){ jump(); } }); canvas.addEventListener('click', ()=>{ if(gameRunning) jump(); }); function updateObstacles(){ for(let o of obstacles){ o.x -= speed; } obstacles = obstacles.filter(o=>o.x+o.w>0); if(obstacles.length===0){ mapIndex++; if(mapIndex>=mapSequence.length){ generateMap(); mapIndex=0;} spawnObstaclesFromMap(mapSequence[mapIndex]); } } function checkCollision(){ for(let o of obstacles){ if(turtle.x + 20 > o.x && turtle.x < o.x + o.w && turtle.y + 72 > o.y){ gameRunning=false; } } } function drawGround(){ ctx.fillStyle="#0f0"; ctx.fillRect(0,groundY,300,5); } function loop(){ ctx.clearRect(0,0,300,300); drawGround(); if(gameRunning){ turtle.y += turtle.vy; turtle.vy += gravity; if(turtle.y>=groundY - 72){turtle.y = groundY - 72; turtle.vy=0; turtle.onGround=true;} animTimer++; if(animTimer>10){ turtle.frame=(turtle.frame+1)%2; animTimer=0; } updateObstacles(); drawMarcus(turtle.frame); checkCollision(); score++; } else if(!gameRunning && score>0){ ctx.fillStyle='#0f0'; ctx.font='bold 14px monospace'; ctx.textAlign='center'; ctx.fillText('رابرت من این پلیر رو دوست ندارم', 150, 140); ctx.fillText('شبیه داشاقه', 150, 160); } else { drawMarcus(0); } ctx.fillStyle="#0f0"; obstacles.forEach(o=>ctx.fillRect(o.x,o.y,o.w,o.h)); ctx.fillStyle="#0f0"; ctx.font="12px monospace"; ctx.textAlign='left'; ctx.fillText("SCORE: "+score, 170, 20); requestAnimationFrame(loop); } loop(); </script> </body> </html>
